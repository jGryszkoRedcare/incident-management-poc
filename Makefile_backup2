# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

############################################################
# Top‑level helper variables                               #
############################################################

ALL_DOCS := $(shell find . -type f -name '*.md' -not -path './.github/*' -not -path '*/node_modules/*' -not -path '*/_build/*' -not -path '*/deps/*' -not -path */Pods/* -not -path */.expo/* | sort)

TOOLS_DIR            := ./internal/tools
MISSPELL_BINARY      := bin/misspell
MISSPELL             := $(TOOLS_DIR)/$(MISSPELL_BINARY)

DOCKER_COMPOSE_CMD   ?= docker compose
DOCKER_COMPOSE_ENV    = --env-file .env --env-file .env.override
DOCKER_COMPOSE_BUILD_ARGS=

# Ngrok defaults – override at CLI if you like
NGROK_CONFIG ?= $(HOME)/.config/ngrok/ngrok.yml
NGROK_LOG    ?= $(HOME)/ngrok.log

# Terraform sub‑projects (incident routers)
TF_DIR_PAGERDUTY := ./terraform/pagerduty
TF_DIR_SQUADCAST := ./terraform/squadcast

ROUTER ?= pagerduty

# Java Workaround for macOS 15.2+ and M4 chips
ifeq ($(shell uname -m),arm64)
	ifeq ($(shell uname -s),Darwin)
		DOCKER_COMPOSE_ENV   += --env-file .env.arm64
		DOCKER_COMPOSE_BUILD_ARGS += --build-arg=_JAVA_OPTIONS=-XX:UseSVE=0
	endif
endif

ifeq ($(ROUTER),pagerduty)
  ROUTER_ENV_FILE = .env_pagerduty
  TF_DIR_CURRENT  = $(TF_DIR_PAGERDUTY)
else ifeq ($(ROUTER),squadcast)
  ROUTER_ENV_FILE = .env_squadcast
  TF_DIR_CURRENT  = $(TF_DIR_SQUADCAST)
else
  $(error Unsupported ROUTER="$(ROUTER)")
endif

# Add router‑specific env‑file to docker compose invocation
DOCKER_COMPOSE_ENV += --env-file $(ROUTER_ENV_FILE)

# Test path helper
PATH_TO_TESTS ?= /workspace/tests/$(ROUTER)


############################################################
# House‑keeping helpers                                    #
############################################################

.PHONY: run-tests run-tracetesting
run-tests:
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) -f docker-compose-tests.yml run frontendTests
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) -f docker-compose-tests.yml run traceBasedTests

run-tracetesting:
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) -f docker-compose-tests.yml run traceBasedTests ${SERVICES_TO_TEST}

############################################################
# Shared shell snippet – export everything from .env files  #
############################################################

define LOAD_ENV
	set -a; \
	[ -f .env ] && . ./.env; \
	[ -f .env.override ] && . .env.override || true; \
	[ -f $(ROUTER_ENV_FILE) ] && . $(ROUTER_ENV_FILE) || true; \
	set +a
endef

############################################################
# Core: spin‑up containers + ngrok (no incident router yet) #
############################################################

.PHONY: start-core
start-core:
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) up --force-recreate --remove-orphans --detach
	@echo "\nOpenTelemetry Demo is running.";
	@echo "  Demo UI  → http://localhost:8080";
	@echo "  Jaeger   → http://localhost:8080/jaeger/ui";
	@echo "  Grafana  → http://localhost:8080/grafana/";
	@echo "  LoadGen  → http://localhost:8080/loadgen/";
	@echo "  Feature  → http://localhost:8080/feature/";
	@echo "\nStarting ngrok tunnels …";
	@nohup ngrok start --config $(NGROK_CONFIG) --all > $(NGROK_LOG) 2>&1 &
	@echo "ngrok running → $(NGROK_LOG)"

# keep original simple target for existing docs/scripts
.PHONY: start
start: start-core

############################################################
# Terraform helpers (per incident router)                  #
############################################################

.PHONY: tf-apply-pagerduty tf-apply-squadcast

tf-apply-router:
	@$(LOAD_ENV)
	terraform -chdir=$(TF_DIR_CURRENT) apply

############################################################
# High‑level “start & configure” aliases                   #
############################################################

.PHONY: start-pagerduty start-squadcast
start-pagerduty: start-core tf-apply-pagerduty
start-squadcast: start-core tf-apply-squadcast

############################################################
# Stop / restart helpers                                   #
############################################################

.PHONY: stop
stop:
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) down --remove-orphans --volumes
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) -f docker-compose-tests.yml down --remove-orphans --volumes
	@pkill -f "ngrok start" 2>/dev/null || true
	@echo "\nOpenTelemetry Demo is stopped."

.PHONY: restart redeploy
restart:\nifdef SERVICE
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) stop $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) rm --force $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) create $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) start $(SERVICE)
else
	@echo "Please provide a service name using SERVICE=<service>"
endif

redeploy:\nifdef SERVICE
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) build $(DOCKER_COMPOSE_BUILD_ARGS) $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) stop $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) rm --force $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) create $(SERVICE)
	$(DOCKER_COMPOSE_CMD) $(DOCKER_COMPOSE_ENV) start $(SERVICE)
else
	@echo "Please provide a service name using SERVICE=<service>"
endif

############################################################
# Quick smoke‑test (local ports)                           #
############################################################

.PHONY: smoketest
smoketest:
	curl -fs http://localhost:3000  || echo "Grafana failed"
	curl -fs http://localhost:9200  || echo "OpenSearch failed"
	curl -fs http://localhost:9090  || echo "Prometheus failed"
